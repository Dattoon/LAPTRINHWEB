#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LAPTRINHWEB.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FourAirline")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAirline(Airline instance);
    partial void UpdateAirline(Airline instance);
    partial void DeleteAirline(Airline instance);
    partial void InsertAirport(Airport instance);
    partial void UpdateAirport(Airport instance);
    partial void DeleteAirport(Airport instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    partial void InsertTicket(Ticket instance);
    partial void UpdateTicket(Ticket instance);
    partial void DeleteTicket(Ticket instance);
    partial void InsertSeat(Seat instance);
    partial void UpdateSeat(Seat instance);
    partial void DeleteSeat(Seat instance);
    partial void InsertPaymentMethod(PaymentMethod instance);
    partial void UpdatePaymentMethod(PaymentMethod instance);
    partial void DeletePaymentMethod(PaymentMethod instance);
    partial void InsertFlight(Flight instance);
    partial void UpdateFlight(Flight instance);
    partial void DeleteFlight(Flight instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertBooking(Booking instance);
    partial void UpdateBooking(Booking instance);
    partial void DeleteBooking(Booking instance);
    partial void InsertBookingDetail(BookingDetail instance);
    partial void UpdateBookingDetail(BookingDetail instance);
    partial void DeleteBookingDetail(BookingDetail instance);
    #endregion
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Airline> Airlines
		{
			get
			{
				return this.GetTable<Airline>();
			}
		}
		
		public System.Data.Linq.Table<Airport> Airports
		{
			get
			{
				return this.GetTable<Airport>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<Ticket> Tickets
		{
			get
			{
				return this.GetTable<Ticket>();
			}
		}
		
		public System.Data.Linq.Table<Seat> Seats
		{
			get
			{
				return this.GetTable<Seat>();
			}
		}
		
		public System.Data.Linq.Table<PaymentMethod> PaymentMethods
		{
			get
			{
				return this.GetTable<PaymentMethod>();
			}
		}
		
		public System.Data.Linq.Table<Flight> Flights
		{
			get
			{
				return this.GetTable<Flight>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<Booking> Bookings
		{
			get
			{
				return this.GetTable<Booking>();
			}
		}
		
		public System.Data.Linq.Table<BookingDetail> BookingDetails
		{
			get
			{
				return this.GetTable<BookingDetail>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Airlines")]
	public partial class Airline : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AirlineID;
		
		private string _AirlineName;
		
		private string _Logo;
		
		private string _ContactInfo;
		
		private EntitySet<Flight> _Flights;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAirlineIDChanging(int value);
    partial void OnAirlineIDChanged();
    partial void OnAirlineNameChanging(string value);
    partial void OnAirlineNameChanged();
    partial void OnLogoChanging(string value);
    partial void OnLogoChanged();
    partial void OnContactInfoChanging(string value);
    partial void OnContactInfoChanged();
    #endregion
		
		public Airline()
		{
			this._Flights = new EntitySet<Flight>(new Action<Flight>(this.attach_Flights), new Action<Flight>(this.detach_Flights));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AirlineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AirlineID
		{
			get
			{
				return this._AirlineID;
			}
			set
			{
				if ((this._AirlineID != value))
				{
					this.OnAirlineIDChanging(value);
					this.SendPropertyChanging();
					this._AirlineID = value;
					this.SendPropertyChanged("AirlineID");
					this.OnAirlineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AirlineName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string AirlineName
		{
			get
			{
				return this._AirlineName;
			}
			set
			{
				if ((this._AirlineName != value))
				{
					this.OnAirlineNameChanging(value);
					this.SendPropertyChanging();
					this._AirlineName = value;
					this.SendPropertyChanged("AirlineName");
					this.OnAirlineNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logo", DbType="NVarChar(255)")]
		public string Logo
		{
			get
			{
				return this._Logo;
			}
			set
			{
				if ((this._Logo != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactInfo", DbType="NVarChar(255)")]
		public string ContactInfo
		{
			get
			{
				return this._ContactInfo;
			}
			set
			{
				if ((this._ContactInfo != value))
				{
					this.OnContactInfoChanging(value);
					this.SendPropertyChanging();
					this._ContactInfo = value;
					this.SendPropertyChanged("ContactInfo");
					this.OnContactInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airline_Flight", Storage="_Flights", ThisKey="AirlineID", OtherKey="AirlineID")]
		public EntitySet<Flight> Flights
		{
			get
			{
				return this._Flights;
			}
			set
			{
				this._Flights.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Flights(Flight entity)
		{
			this.SendPropertyChanging();
			entity.Airline = this;
		}
		
		private void detach_Flights(Flight entity)
		{
			this.SendPropertyChanging();
			entity.Airline = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Airports")]
	public partial class Airport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AirportID;
		
		private string _AirportName;
		
		private string _City;
		
		private string _Country;
		
		private EntitySet<Flight> _Flights;
		
		private EntitySet<Flight> _Flights1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAirportIDChanging(int value);
    partial void OnAirportIDChanged();
    partial void OnAirportNameChanging(string value);
    partial void OnAirportNameChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    #endregion
		
		public Airport()
		{
			this._Flights = new EntitySet<Flight>(new Action<Flight>(this.attach_Flights), new Action<Flight>(this.detach_Flights));
			this._Flights1 = new EntitySet<Flight>(new Action<Flight>(this.attach_Flights1), new Action<Flight>(this.detach_Flights1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AirportID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AirportID
		{
			get
			{
				return this._AirportID;
			}
			set
			{
				if ((this._AirportID != value))
				{
					this.OnAirportIDChanging(value);
					this.SendPropertyChanging();
					this._AirportID = value;
					this.SendPropertyChanged("AirportID");
					this.OnAirportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AirportName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string AirportName
		{
			get
			{
				return this._AirportName;
			}
			set
			{
				if ((this._AirportName != value))
				{
					this.OnAirportNameChanging(value);
					this.SendPropertyChanging();
					this._AirportName = value;
					this.SendPropertyChanged("AirportName");
					this.OnAirportNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airport_Flight", Storage="_Flights", ThisKey="AirportID", OtherKey="ArrivalAirportID")]
		public EntitySet<Flight> Flights
		{
			get
			{
				return this._Flights;
			}
			set
			{
				this._Flights.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airport_Flight1", Storage="_Flights1", ThisKey="AirportID", OtherKey="DepartureAirportID")]
		public EntitySet<Flight> Flights1
		{
			get
			{
				return this._Flights1;
			}
			set
			{
				this._Flights1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Flights(Flight entity)
		{
			this.SendPropertyChanging();
			entity.Airport = this;
		}
		
		private void detach_Flights(Flight entity)
		{
			this.SendPropertyChanging();
			entity.Airport = null;
		}
		
		private void attach_Flights1(Flight entity)
		{
			this.SendPropertyChanging();
			entity.Airport1 = this;
		}
		
		private void detach_Flights1(Flight entity)
		{
			this.SendPropertyChanging();
			entity.Airport1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Transactions")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TransactionID;
		
		private System.Nullable<int> _BookingID;
		
		private System.Nullable<int> _PaymentMethodID;
		
		private System.DateTime _TransactionDate;
		
		private decimal _Amount;
		
		private string _TransactionStatus;
		
		private string _TransactionType;
		
		private string _CreditCardInfo;
		
		private EntityRef<PaymentMethod> _PaymentMethod;
		
		private EntityRef<Booking> _Booking;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTransactionIDChanging(int value);
    partial void OnTransactionIDChanged();
    partial void OnBookingIDChanging(System.Nullable<int> value);
    partial void OnBookingIDChanged();
    partial void OnPaymentMethodIDChanging(System.Nullable<int> value);
    partial void OnPaymentMethodIDChanged();
    partial void OnTransactionDateChanging(System.DateTime value);
    partial void OnTransactionDateChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    partial void OnTransactionStatusChanging(string value);
    partial void OnTransactionStatusChanged();
    partial void OnTransactionTypeChanging(string value);
    partial void OnTransactionTypeChanged();
    partial void OnCreditCardInfoChanging(string value);
    partial void OnCreditCardInfoChanged();
    #endregion
		
		public Transaction()
		{
			this._PaymentMethod = default(EntityRef<PaymentMethod>);
			this._Booking = default(EntityRef<Booking>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TransactionID
		{
			get
			{
				return this._TransactionID;
			}
			set
			{
				if ((this._TransactionID != value))
				{
					this.OnTransactionIDChanging(value);
					this.SendPropertyChanging();
					this._TransactionID = value;
					this.SendPropertyChanged("TransactionID");
					this.OnTransactionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookingID", DbType="Int")]
		public System.Nullable<int> BookingID
		{
			get
			{
				return this._BookingID;
			}
			set
			{
				if ((this._BookingID != value))
				{
					if (this._Booking.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookingIDChanging(value);
					this.SendPropertyChanging();
					this._BookingID = value;
					this.SendPropertyChanged("BookingID");
					this.OnBookingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMethodID", DbType="Int")]
		public System.Nullable<int> PaymentMethodID
		{
			get
			{
				return this._PaymentMethodID;
			}
			set
			{
				if ((this._PaymentMethodID != value))
				{
					if (this._PaymentMethod.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentMethodIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethodID = value;
					this.SendPropertyChanged("PaymentMethodID");
					this.OnPaymentMethodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionDate", DbType="DateTime NOT NULL")]
		public System.DateTime TransactionDate
		{
			get
			{
				return this._TransactionDate;
			}
			set
			{
				if ((this._TransactionDate != value))
				{
					this.OnTransactionDateChanging(value);
					this.SendPropertyChanging();
					this._TransactionDate = value;
					this.SendPropertyChanged("TransactionDate");
					this.OnTransactionDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Decimal(10,2) NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionStatus", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TransactionStatus
		{
			get
			{
				return this._TransactionStatus;
			}
			set
			{
				if ((this._TransactionStatus != value))
				{
					this.OnTransactionStatusChanging(value);
					this.SendPropertyChanging();
					this._TransactionStatus = value;
					this.SendPropertyChanged("TransactionStatus");
					this.OnTransactionStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TransactionType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TransactionType
		{
			get
			{
				return this._TransactionType;
			}
			set
			{
				if ((this._TransactionType != value))
				{
					this.OnTransactionTypeChanging(value);
					this.SendPropertyChanging();
					this._TransactionType = value;
					this.SendPropertyChanged("TransactionType");
					this.OnTransactionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreditCardInfo", DbType="NVarChar(255)")]
		public string CreditCardInfo
		{
			get
			{
				return this._CreditCardInfo;
			}
			set
			{
				if ((this._CreditCardInfo != value))
				{
					this.OnCreditCardInfoChanging(value);
					this.SendPropertyChanging();
					this._CreditCardInfo = value;
					this.SendPropertyChanged("CreditCardInfo");
					this.OnCreditCardInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMethod_Transaction", Storage="_PaymentMethod", ThisKey="PaymentMethodID", OtherKey="PaymentMethodID", IsForeignKey=true)]
		public PaymentMethod PaymentMethod
		{
			get
			{
				return this._PaymentMethod.Entity;
			}
			set
			{
				PaymentMethod previousValue = this._PaymentMethod.Entity;
				if (((previousValue != value) 
							|| (this._PaymentMethod.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PaymentMethod.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._PaymentMethod.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._PaymentMethodID = value.PaymentMethodID;
					}
					else
					{
						this._PaymentMethodID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PaymentMethod");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Booking_Transaction", Storage="_Booking", ThisKey="BookingID", OtherKey="BookingID", IsForeignKey=true)]
		public Booking Booking
		{
			get
			{
				return this._Booking.Entity;
			}
			set
			{
				Booking previousValue = this._Booking.Entity;
				if (((previousValue != value) 
							|| (this._Booking.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Booking.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Booking.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._BookingID = value.BookingID;
					}
					else
					{
						this._BookingID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Booking");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tickets")]
	public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketID;
		
		private System.Nullable<int> _FlightID;
		
		private string _TicketType;
		
		private decimal _Price;
		
		private EntitySet<Booking> _Bookings;
		
		private EntityRef<Flight> _Flight;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketIDChanging(int value);
    partial void OnTicketIDChanged();
    partial void OnFlightIDChanging(System.Nullable<int> value);
    partial void OnFlightIDChanged();
    partial void OnTicketTypeChanging(string value);
    partial void OnTicketTypeChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public Ticket()
		{
			this._Bookings = new EntitySet<Booking>(new Action<Booking>(this.attach_Bookings), new Action<Booking>(this.detach_Bookings));
			this._Flight = default(EntityRef<Flight>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TicketID
		{
			get
			{
				return this._TicketID;
			}
			set
			{
				if ((this._TicketID != value))
				{
					this.OnTicketIDChanging(value);
					this.SendPropertyChanging();
					this._TicketID = value;
					this.SendPropertyChanged("TicketID");
					this.OnTicketIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlightID", DbType="Int")]
		public System.Nullable<int> FlightID
		{
			get
			{
				return this._FlightID;
			}
			set
			{
				if ((this._FlightID != value))
				{
					if (this._Flight.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFlightIDChanging(value);
					this.SendPropertyChanging();
					this._FlightID = value;
					this.SendPropertyChanged("FlightID");
					this.OnFlightIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketType", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TicketType
		{
			get
			{
				return this._TicketType;
			}
			set
			{
				if ((this._TicketType != value))
				{
					this.OnTicketTypeChanging(value);
					this.SendPropertyChanging();
					this._TicketType = value;
					this.SendPropertyChanged("TicketType");
					this.OnTicketTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(10,2) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ticket_Booking", Storage="_Bookings", ThisKey="TicketID", OtherKey="TicketID")]
		public EntitySet<Booking> Bookings
		{
			get
			{
				return this._Bookings;
			}
			set
			{
				this._Bookings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flight_Ticket", Storage="_Flight", ThisKey="FlightID", OtherKey="FlightID", IsForeignKey=true)]
		public Flight Flight
		{
			get
			{
				return this._Flight.Entity;
			}
			set
			{
				Flight previousValue = this._Flight.Entity;
				if (((previousValue != value) 
							|| (this._Flight.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Flight.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Flight.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._FlightID = value.FlightID;
					}
					else
					{
						this._FlightID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Flight");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = this;
		}
		
		private void detach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Ticket = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Seats")]
	public partial class Seat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SeatID;
		
		private System.Nullable<int> _FlightID;
		
		private string _SeatNumber;
		
		private string _SeatClass;
		
		private bool _IsAvailable;
		
		private bool _IsBooked;
		
		private decimal _Price;
		
		private EntitySet<BookingDetail> _BookingDetails;
		
		private EntityRef<Flight> _Flight;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSeatIDChanging(int value);
    partial void OnSeatIDChanged();
    partial void OnFlightIDChanging(System.Nullable<int> value);
    partial void OnFlightIDChanged();
    partial void OnSeatNumberChanging(string value);
    partial void OnSeatNumberChanged();
    partial void OnSeatClassChanging(string value);
    partial void OnSeatClassChanged();
    partial void OnIsAvailableChanging(bool value);
    partial void OnIsAvailableChanged();
    partial void OnIsBookedChanging(bool value);
    partial void OnIsBookedChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    #endregion
		
		public Seat()
		{
			this._BookingDetails = new EntitySet<BookingDetail>(new Action<BookingDetail>(this.attach_BookingDetails), new Action<BookingDetail>(this.detach_BookingDetails));
			this._Flight = default(EntityRef<Flight>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeatID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SeatID
		{
			get
			{
				return this._SeatID;
			}
			set
			{
				if ((this._SeatID != value))
				{
					this.OnSeatIDChanging(value);
					this.SendPropertyChanging();
					this._SeatID = value;
					this.SendPropertyChanged("SeatID");
					this.OnSeatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlightID", DbType="Int")]
		public System.Nullable<int> FlightID
		{
			get
			{
				return this._FlightID;
			}
			set
			{
				if ((this._FlightID != value))
				{
					if (this._Flight.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFlightIDChanging(value);
					this.SendPropertyChanging();
					this._FlightID = value;
					this.SendPropertyChanged("FlightID");
					this.OnFlightIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeatNumber", DbType="NVarChar(10) NOT NULL", CanBeNull=false)]
		public string SeatNumber
		{
			get
			{
				return this._SeatNumber;
			}
			set
			{
				if ((this._SeatNumber != value))
				{
					this.OnSeatNumberChanging(value);
					this.SendPropertyChanging();
					this._SeatNumber = value;
					this.SendPropertyChanged("SeatNumber");
					this.OnSeatNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeatClass", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SeatClass
		{
			get
			{
				return this._SeatClass;
			}
			set
			{
				if ((this._SeatClass != value))
				{
					this.OnSeatClassChanging(value);
					this.SendPropertyChanging();
					this._SeatClass = value;
					this.SendPropertyChanged("SeatClass");
					this.OnSeatClassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsAvailable", DbType="Bit NOT NULL")]
		public bool IsAvailable
		{
			get
			{
				return this._IsAvailable;
			}
			set
			{
				if ((this._IsAvailable != value))
				{
					this.OnIsAvailableChanging(value);
					this.SendPropertyChanging();
					this._IsAvailable = value;
					this.SendPropertyChanged("IsAvailable");
					this.OnIsAvailableChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBooked", DbType="Bit NOT NULL")]
		public bool IsBooked
		{
			get
			{
				return this._IsBooked;
			}
			set
			{
				if ((this._IsBooked != value))
				{
					this.OnIsBookedChanging(value);
					this.SendPropertyChanging();
					this._IsBooked = value;
					this.SendPropertyChanged("IsBooked");
					this.OnIsBookedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Decimal(10,2) NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_BookingDetail", Storage="_BookingDetails", ThisKey="SeatID", OtherKey="SeatID")]
		public EntitySet<BookingDetail> BookingDetails
		{
			get
			{
				return this._BookingDetails;
			}
			set
			{
				this._BookingDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flight_Seat", Storage="_Flight", ThisKey="FlightID", OtherKey="FlightID", IsForeignKey=true)]
		public Flight Flight
		{
			get
			{
				return this._Flight.Entity;
			}
			set
			{
				Flight previousValue = this._Flight.Entity;
				if (((previousValue != value) 
							|| (this._Flight.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Flight.Entity = null;
						previousValue.Seats.Remove(this);
					}
					this._Flight.Entity = value;
					if ((value != null))
					{
						value.Seats.Add(this);
						this._FlightID = value.FlightID;
					}
					else
					{
						this._FlightID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Flight");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BookingDetails(BookingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Seat = this;
		}
		
		private void detach_BookingDetails(BookingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Seat = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PaymentMethods")]
	public partial class PaymentMethod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PaymentMethodID;
		
		private string _PaymentMethodName;
		
		private EntitySet<Transaction> _Transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPaymentMethodIDChanging(int value);
    partial void OnPaymentMethodIDChanged();
    partial void OnPaymentMethodNameChanging(string value);
    partial void OnPaymentMethodNameChanged();
    #endregion
		
		public PaymentMethod()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMethodID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PaymentMethodID
		{
			get
			{
				return this._PaymentMethodID;
			}
			set
			{
				if ((this._PaymentMethodID != value))
				{
					this.OnPaymentMethodIDChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethodID = value;
					this.SendPropertyChanged("PaymentMethodID");
					this.OnPaymentMethodIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentMethodName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string PaymentMethodName
		{
			get
			{
				return this._PaymentMethodName;
			}
			set
			{
				if ((this._PaymentMethodName != value))
				{
					this.OnPaymentMethodNameChanging(value);
					this.SendPropertyChanging();
					this._PaymentMethodName = value;
					this.SendPropertyChanged("PaymentMethodName");
					this.OnPaymentMethodNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PaymentMethod_Transaction", Storage="_Transactions", ThisKey="PaymentMethodID", OtherKey="PaymentMethodID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMethod = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.PaymentMethod = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Flights")]
	public partial class Flight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FlightID;
		
		private System.Nullable<int> _AirlineID;
		
		private System.Nullable<int> _DepartureAirportID;
		
		private System.Nullable<int> _ArrivalAirportID;
		
		private System.DateTime _DepartureTime;
		
		private System.DateTime _ArrivalTime;
		
		private int _Duration;
		
		private int _AvailableSeats;
		
		private string _FlightStatus;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntitySet<Seat> _Seats;
		
		private EntitySet<BookingDetail> _BookingDetails;
		
		private EntitySet<BookingDetail> _BookingDetails1;
		
		private EntityRef<Airline> _Airline;
		
		private EntityRef<Airport> _Airport;
		
		private EntityRef<Airport> _Airport1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFlightIDChanging(int value);
    partial void OnFlightIDChanged();
    partial void OnAirlineIDChanging(System.Nullable<int> value);
    partial void OnAirlineIDChanged();
    partial void OnDepartureAirportIDChanging(System.Nullable<int> value);
    partial void OnDepartureAirportIDChanged();
    partial void OnArrivalAirportIDChanging(System.Nullable<int> value);
    partial void OnArrivalAirportIDChanged();
    partial void OnDepartureTimeChanging(System.DateTime value);
    partial void OnDepartureTimeChanged();
    partial void OnArrivalTimeChanging(System.DateTime value);
    partial void OnArrivalTimeChanged();
    partial void OnDurationChanging(int value);
    partial void OnDurationChanged();
    partial void OnAvailableSeatsChanging(int value);
    partial void OnAvailableSeatsChanged();
    partial void OnFlightStatusChanging(string value);
    partial void OnFlightStatusChanged();
    #endregion
		
		public Flight()
		{
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._Seats = new EntitySet<Seat>(new Action<Seat>(this.attach_Seats), new Action<Seat>(this.detach_Seats));
			this._BookingDetails = new EntitySet<BookingDetail>(new Action<BookingDetail>(this.attach_BookingDetails), new Action<BookingDetail>(this.detach_BookingDetails));
			this._BookingDetails1 = new EntitySet<BookingDetail>(new Action<BookingDetail>(this.attach_BookingDetails1), new Action<BookingDetail>(this.detach_BookingDetails1));
			this._Airline = default(EntityRef<Airline>);
			this._Airport = default(EntityRef<Airport>);
			this._Airport1 = default(EntityRef<Airport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlightID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FlightID
		{
			get
			{
				return this._FlightID;
			}
			set
			{
				if ((this._FlightID != value))
				{
					this.OnFlightIDChanging(value);
					this.SendPropertyChanging();
					this._FlightID = value;
					this.SendPropertyChanged("FlightID");
					this.OnFlightIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AirlineID", DbType="Int")]
		public System.Nullable<int> AirlineID
		{
			get
			{
				return this._AirlineID;
			}
			set
			{
				if ((this._AirlineID != value))
				{
					if (this._Airline.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAirlineIDChanging(value);
					this.SendPropertyChanging();
					this._AirlineID = value;
					this.SendPropertyChanged("AirlineID");
					this.OnAirlineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartureAirportID", DbType="Int")]
		public System.Nullable<int> DepartureAirportID
		{
			get
			{
				return this._DepartureAirportID;
			}
			set
			{
				if ((this._DepartureAirportID != value))
				{
					if (this._Airport1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDepartureAirportIDChanging(value);
					this.SendPropertyChanging();
					this._DepartureAirportID = value;
					this.SendPropertyChanged("DepartureAirportID");
					this.OnDepartureAirportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArrivalAirportID", DbType="Int")]
		public System.Nullable<int> ArrivalAirportID
		{
			get
			{
				return this._ArrivalAirportID;
			}
			set
			{
				if ((this._ArrivalAirportID != value))
				{
					if (this._Airport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArrivalAirportIDChanging(value);
					this.SendPropertyChanging();
					this._ArrivalAirportID = value;
					this.SendPropertyChanged("ArrivalAirportID");
					this.OnArrivalAirportIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartureTime", DbType="DateTime NOT NULL")]
		public System.DateTime DepartureTime
		{
			get
			{
				return this._DepartureTime;
			}
			set
			{
				if ((this._DepartureTime != value))
				{
					this.OnDepartureTimeChanging(value);
					this.SendPropertyChanging();
					this._DepartureTime = value;
					this.SendPropertyChanged("DepartureTime");
					this.OnDepartureTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArrivalTime", DbType="DateTime NOT NULL")]
		public System.DateTime ArrivalTime
		{
			get
			{
				return this._ArrivalTime;
			}
			set
			{
				if ((this._ArrivalTime != value))
				{
					this.OnArrivalTimeChanging(value);
					this.SendPropertyChanging();
					this._ArrivalTime = value;
					this.SendPropertyChanged("ArrivalTime");
					this.OnArrivalTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="Int NOT NULL")]
		public int Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailableSeats", DbType="Int NOT NULL")]
		public int AvailableSeats
		{
			get
			{
				return this._AvailableSeats;
			}
			set
			{
				if ((this._AvailableSeats != value))
				{
					this.OnAvailableSeatsChanging(value);
					this.SendPropertyChanging();
					this._AvailableSeats = value;
					this.SendPropertyChanged("AvailableSeats");
					this.OnAvailableSeatsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FlightStatus", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FlightStatus
		{
			get
			{
				return this._FlightStatus;
			}
			set
			{
				if ((this._FlightStatus != value))
				{
					this.OnFlightStatusChanging(value);
					this.SendPropertyChanging();
					this._FlightStatus = value;
					this.SendPropertyChanged("FlightStatus");
					this.OnFlightStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flight_Ticket", Storage="_Tickets", ThisKey="FlightID", OtherKey="FlightID")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flight_Seat", Storage="_Seats", ThisKey="FlightID", OtherKey="FlightID")]
		public EntitySet<Seat> Seats
		{
			get
			{
				return this._Seats;
			}
			set
			{
				this._Seats.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flight_BookingDetail", Storage="_BookingDetails", ThisKey="FlightID", OtherKey="OutboundFlightID")]
		public EntitySet<BookingDetail> BookingDetails
		{
			get
			{
				return this._BookingDetails;
			}
			set
			{
				this._BookingDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flight_BookingDetail1", Storage="_BookingDetails1", ThisKey="FlightID", OtherKey="ReturnFlightID")]
		public EntitySet<BookingDetail> BookingDetails1
		{
			get
			{
				return this._BookingDetails1;
			}
			set
			{
				this._BookingDetails1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airline_Flight", Storage="_Airline", ThisKey="AirlineID", OtherKey="AirlineID", IsForeignKey=true)]
		public Airline Airline
		{
			get
			{
				return this._Airline.Entity;
			}
			set
			{
				Airline previousValue = this._Airline.Entity;
				if (((previousValue != value) 
							|| (this._Airline.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Airline.Entity = null;
						previousValue.Flights.Remove(this);
					}
					this._Airline.Entity = value;
					if ((value != null))
					{
						value.Flights.Add(this);
						this._AirlineID = value.AirlineID;
					}
					else
					{
						this._AirlineID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Airline");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airport_Flight", Storage="_Airport", ThisKey="ArrivalAirportID", OtherKey="AirportID", IsForeignKey=true)]
		public Airport Airport
		{
			get
			{
				return this._Airport.Entity;
			}
			set
			{
				Airport previousValue = this._Airport.Entity;
				if (((previousValue != value) 
							|| (this._Airport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Airport.Entity = null;
						previousValue.Flights.Remove(this);
					}
					this._Airport.Entity = value;
					if ((value != null))
					{
						value.Flights.Add(this);
						this._ArrivalAirportID = value.AirportID;
					}
					else
					{
						this._ArrivalAirportID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Airport");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Airport_Flight1", Storage="_Airport1", ThisKey="DepartureAirportID", OtherKey="AirportID", IsForeignKey=true)]
		public Airport Airport1
		{
			get
			{
				return this._Airport1.Entity;
			}
			set
			{
				Airport previousValue = this._Airport1.Entity;
				if (((previousValue != value) 
							|| (this._Airport1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Airport1.Entity = null;
						previousValue.Flights1.Remove(this);
					}
					this._Airport1.Entity = value;
					if ((value != null))
					{
						value.Flights1.Add(this);
						this._DepartureAirportID = value.AirportID;
					}
					else
					{
						this._DepartureAirportID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Airport1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Flight = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Flight = null;
		}
		
		private void attach_Seats(Seat entity)
		{
			this.SendPropertyChanging();
			entity.Flight = this;
		}
		
		private void detach_Seats(Seat entity)
		{
			this.SendPropertyChanging();
			entity.Flight = null;
		}
		
		private void attach_BookingDetails(BookingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Flight = this;
		}
		
		private void detach_BookingDetails(BookingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Flight = null;
		}
		
		private void attach_BookingDetails1(BookingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Flight1 = this;
		}
		
		private void detach_BookingDetails1(BookingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Flight1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customers")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private string _UserName;
		
		private string _Email;
		
		private string _PasswordHash;
		
		private string _PhoneNumber;
		
		private bool _IsRegistered;
		
		private EntitySet<Booking> _Bookings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnIsRegisteredChanging(bool value);
    partial void OnIsRegisteredChanged();
    #endregion
		
		public Customer()
		{
			this._Bookings = new EntitySet<Booking>(new Action<Booking>(this.attach_Bookings), new Action<Booking>(this.detach_Bookings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(20)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRegistered", DbType="Bit NOT NULL")]
		public bool IsRegistered
		{
			get
			{
				return this._IsRegistered;
			}
			set
			{
				if ((this._IsRegistered != value))
				{
					this.OnIsRegisteredChanging(value);
					this.SendPropertyChanging();
					this._IsRegistered = value;
					this.SendPropertyChanged("IsRegistered");
					this.OnIsRegisteredChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Booking", Storage="_Bookings", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<Booking> Bookings
		{
			get
			{
				return this._Bookings;
			}
			set
			{
				this._Bookings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Bookings(Booking entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bookings")]
	public partial class Booking : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookingID;
		
		private System.Nullable<int> _CustomerID;
		
		private System.Nullable<int> _TicketID;
		
		private System.DateTime _BookingDate;
		
		private bool _IsPaid;
		
		private bool _IsRoundTrip;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntitySet<BookingDetail> _BookingDetails;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<Ticket> _Ticket;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookingIDChanging(int value);
    partial void OnBookingIDChanged();
    partial void OnCustomerIDChanging(System.Nullable<int> value);
    partial void OnCustomerIDChanged();
    partial void OnTicketIDChanging(System.Nullable<int> value);
    partial void OnTicketIDChanged();
    partial void OnBookingDateChanging(System.DateTime value);
    partial void OnBookingDateChanged();
    partial void OnIsPaidChanging(bool value);
    partial void OnIsPaidChanged();
    partial void OnIsRoundTripChanging(bool value);
    partial void OnIsRoundTripChanged();
    #endregion
		
		public Booking()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._BookingDetails = new EntitySet<BookingDetail>(new Action<BookingDetail>(this.attach_BookingDetails), new Action<BookingDetail>(this.detach_BookingDetails));
			this._Customer = default(EntityRef<Customer>);
			this._Ticket = default(EntityRef<Ticket>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookingID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BookingID
		{
			get
			{
				return this._BookingID;
			}
			set
			{
				if ((this._BookingID != value))
				{
					this.OnBookingIDChanging(value);
					this.SendPropertyChanging();
					this._BookingID = value;
					this.SendPropertyChanged("BookingID");
					this.OnBookingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int")]
		public System.Nullable<int> CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketID", DbType="Int")]
		public System.Nullable<int> TicketID
		{
			get
			{
				return this._TicketID;
			}
			set
			{
				if ((this._TicketID != value))
				{
					if (this._Ticket.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTicketIDChanging(value);
					this.SendPropertyChanging();
					this._TicketID = value;
					this.SendPropertyChanged("TicketID");
					this.OnTicketIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookingDate", DbType="DateTime NOT NULL")]
		public System.DateTime BookingDate
		{
			get
			{
				return this._BookingDate;
			}
			set
			{
				if ((this._BookingDate != value))
				{
					this.OnBookingDateChanging(value);
					this.SendPropertyChanging();
					this._BookingDate = value;
					this.SendPropertyChanged("BookingDate");
					this.OnBookingDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPaid", DbType="Bit NOT NULL")]
		public bool IsPaid
		{
			get
			{
				return this._IsPaid;
			}
			set
			{
				if ((this._IsPaid != value))
				{
					this.OnIsPaidChanging(value);
					this.SendPropertyChanging();
					this._IsPaid = value;
					this.SendPropertyChanged("IsPaid");
					this.OnIsPaidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRoundTrip", DbType="Bit NOT NULL")]
		public bool IsRoundTrip
		{
			get
			{
				return this._IsRoundTrip;
			}
			set
			{
				if ((this._IsRoundTrip != value))
				{
					this.OnIsRoundTripChanging(value);
					this.SendPropertyChanging();
					this._IsRoundTrip = value;
					this.SendPropertyChanged("IsRoundTrip");
					this.OnIsRoundTripChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Booking_Transaction", Storage="_Transactions", ThisKey="BookingID", OtherKey="BookingID")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Booking_BookingDetail", Storage="_BookingDetails", ThisKey="BookingID", OtherKey="BookingID")]
		public EntitySet<BookingDetail> BookingDetails
		{
			get
			{
				return this._BookingDetails;
			}
			set
			{
				this._BookingDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Booking", Storage="_Customer", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Bookings.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Bookings.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Ticket_Booking", Storage="_Ticket", ThisKey="TicketID", OtherKey="TicketID", IsForeignKey=true)]
		public Ticket Ticket
		{
			get
			{
				return this._Ticket.Entity;
			}
			set
			{
				Ticket previousValue = this._Ticket.Entity;
				if (((previousValue != value) 
							|| (this._Ticket.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Ticket.Entity = null;
						previousValue.Bookings.Remove(this);
					}
					this._Ticket.Entity = value;
					if ((value != null))
					{
						value.Bookings.Add(this);
						this._TicketID = value.TicketID;
					}
					else
					{
						this._TicketID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Ticket");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Booking = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Booking = null;
		}
		
		private void attach_BookingDetails(BookingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Booking = this;
		}
		
		private void detach_BookingDetails(BookingDetail entity)
		{
			this.SendPropertyChanging();
			entity.Booking = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BookingDetails")]
	public partial class BookingDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BookingDetailID;
		
		private System.Nullable<int> _BookingID;
		
		private System.Nullable<int> _SeatID;
		
		private System.Nullable<int> _OutboundFlightID;
		
		private System.Nullable<int> _ReturnFlightID;
		
		private EntityRef<Booking> _Booking;
		
		private EntityRef<Flight> _Flight;
		
		private EntityRef<Flight> _Flight1;
		
		private EntityRef<Seat> _Seat;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBookingDetailIDChanging(int value);
    partial void OnBookingDetailIDChanged();
    partial void OnBookingIDChanging(System.Nullable<int> value);
    partial void OnBookingIDChanged();
    partial void OnSeatIDChanging(System.Nullable<int> value);
    partial void OnSeatIDChanged();
    partial void OnOutboundFlightIDChanging(System.Nullable<int> value);
    partial void OnOutboundFlightIDChanged();
    partial void OnReturnFlightIDChanging(System.Nullable<int> value);
    partial void OnReturnFlightIDChanged();
    #endregion
		
		public BookingDetail()
		{
			this._Booking = default(EntityRef<Booking>);
			this._Flight = default(EntityRef<Flight>);
			this._Flight1 = default(EntityRef<Flight>);
			this._Seat = default(EntityRef<Seat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookingDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BookingDetailID
		{
			get
			{
				return this._BookingDetailID;
			}
			set
			{
				if ((this._BookingDetailID != value))
				{
					this.OnBookingDetailIDChanging(value);
					this.SendPropertyChanging();
					this._BookingDetailID = value;
					this.SendPropertyChanged("BookingDetailID");
					this.OnBookingDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BookingID", DbType="Int")]
		public System.Nullable<int> BookingID
		{
			get
			{
				return this._BookingID;
			}
			set
			{
				if ((this._BookingID != value))
				{
					if (this._Booking.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBookingIDChanging(value);
					this.SendPropertyChanging();
					this._BookingID = value;
					this.SendPropertyChanged("BookingID");
					this.OnBookingIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeatID", DbType="Int")]
		public System.Nullable<int> SeatID
		{
			get
			{
				return this._SeatID;
			}
			set
			{
				if ((this._SeatID != value))
				{
					if (this._Seat.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSeatIDChanging(value);
					this.SendPropertyChanging();
					this._SeatID = value;
					this.SendPropertyChanged("SeatID");
					this.OnSeatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutboundFlightID", DbType="Int")]
		public System.Nullable<int> OutboundFlightID
		{
			get
			{
				return this._OutboundFlightID;
			}
			set
			{
				if ((this._OutboundFlightID != value))
				{
					if (this._Flight.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOutboundFlightIDChanging(value);
					this.SendPropertyChanging();
					this._OutboundFlightID = value;
					this.SendPropertyChanged("OutboundFlightID");
					this.OnOutboundFlightIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReturnFlightID", DbType="Int")]
		public System.Nullable<int> ReturnFlightID
		{
			get
			{
				return this._ReturnFlightID;
			}
			set
			{
				if ((this._ReturnFlightID != value))
				{
					if (this._Flight1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReturnFlightIDChanging(value);
					this.SendPropertyChanging();
					this._ReturnFlightID = value;
					this.SendPropertyChanged("ReturnFlightID");
					this.OnReturnFlightIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Booking_BookingDetail", Storage="_Booking", ThisKey="BookingID", OtherKey="BookingID", IsForeignKey=true)]
		public Booking Booking
		{
			get
			{
				return this._Booking.Entity;
			}
			set
			{
				Booking previousValue = this._Booking.Entity;
				if (((previousValue != value) 
							|| (this._Booking.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Booking.Entity = null;
						previousValue.BookingDetails.Remove(this);
					}
					this._Booking.Entity = value;
					if ((value != null))
					{
						value.BookingDetails.Add(this);
						this._BookingID = value.BookingID;
					}
					else
					{
						this._BookingID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Booking");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flight_BookingDetail", Storage="_Flight", ThisKey="OutboundFlightID", OtherKey="FlightID", IsForeignKey=true)]
		public Flight Flight
		{
			get
			{
				return this._Flight.Entity;
			}
			set
			{
				Flight previousValue = this._Flight.Entity;
				if (((previousValue != value) 
							|| (this._Flight.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Flight.Entity = null;
						previousValue.BookingDetails.Remove(this);
					}
					this._Flight.Entity = value;
					if ((value != null))
					{
						value.BookingDetails.Add(this);
						this._OutboundFlightID = value.FlightID;
					}
					else
					{
						this._OutboundFlightID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Flight");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Flight_BookingDetail1", Storage="_Flight1", ThisKey="ReturnFlightID", OtherKey="FlightID", IsForeignKey=true)]
		public Flight Flight1
		{
			get
			{
				return this._Flight1.Entity;
			}
			set
			{
				Flight previousValue = this._Flight1.Entity;
				if (((previousValue != value) 
							|| (this._Flight1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Flight1.Entity = null;
						previousValue.BookingDetails1.Remove(this);
					}
					this._Flight1.Entity = value;
					if ((value != null))
					{
						value.BookingDetails1.Add(this);
						this._ReturnFlightID = value.FlightID;
					}
					else
					{
						this._ReturnFlightID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Flight1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Seat_BookingDetail", Storage="_Seat", ThisKey="SeatID", OtherKey="SeatID", IsForeignKey=true)]
		public Seat Seat
		{
			get
			{
				return this._Seat.Entity;
			}
			set
			{
				Seat previousValue = this._Seat.Entity;
				if (((previousValue != value) 
							|| (this._Seat.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Seat.Entity = null;
						previousValue.BookingDetails.Remove(this);
					}
					this._Seat.Entity = value;
					if ((value != null))
					{
						value.BookingDetails.Add(this);
						this._SeatID = value.SeatID;
					}
					else
					{
						this._SeatID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Seat");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
